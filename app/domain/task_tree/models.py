from typing import List, Optional
from datetime import datetime
import graphene

class Task(graphene.ObjectType):
    task_id = graphene.ID(required=True)
    title = graphene.String(required=True)
    assigned_to = graphene.String()
    description = graphene.String()
    due_date = graphene.DateTime()
    status = graphene.String()
    skills = graphene.List(graphene.String)
    subtasks = graphene.List(lambda: Task)

TaskCreate
class CreateTask(graphene.Mutation):
    class Arguments:
        title = graphene.String(required=True)
        # Add other arguments as necessary

    # Output field for the mutation
    task = graphene.Field(Task)

    def mutate(self, info, title):
        # Assuming the creation logic returns a dictionary with the new task data
        # In practice, interact with your database or service layer here
        new_task_data = {
            "task_id": "1",  # Example ID, assuming it's generated by your database or service layer
            "title": title,
            # Set other fields as needed, or use defaults for demonstration
        }

        # The correct way to construct the return value is to directly set the fields on the mutation instance
        # Graphene handles converting this data structure to the appropriate GraphQL object type based on your schema
        return CreateTask(task=new_task_data)

